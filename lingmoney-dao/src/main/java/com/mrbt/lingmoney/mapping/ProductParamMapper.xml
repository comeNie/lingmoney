<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mrbt.lingmoney.mapper.ProductParamMapper">
	<resultMap id="BaseResultMap" type="com.mrbt.lingmoney.model.ProductParam">
		<!-- @mbggenerated -->
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="pid" jdbcType="INTEGER" property="pid" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="description" jdbcType="VARCHAR" property="description" />
		<result column="status" jdbcType="INTEGER" property="status" />
		<result column="holiday" jdbcType="VARCHAR" property="holiday" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<!-- @mbggenerated -->
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<!-- @mbggenerated -->
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		<!-- @mbggenerated -->
		id, pid, name, description, status, holiday
	</sql>
	<select id="selectByExample" parameterType="com.mrbt.lingmoney.model.ProductParamExample"
		resultMap="BaseResultMap">
		<!-- @mbggenerated -->
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from product_param
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
		<if test="limitStart >= 0">
			limit ${limitStart} , ${limitEnd}
		</if>
	</select>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		<!-- @mbggenerated -->
		select
		<include refid="Base_Column_List" />
		from product_param
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		<!-- @mbggenerated -->
		delete from product_param
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.mrbt.lingmoney.model.ProductParamExample">
		<!-- @mbggenerated -->
		delete from product_param
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.mrbt.lingmoney.model.ProductParam">
		<!-- @mbggenerated -->
		insert into product_param (id, pid, name,
		description, status, holiday
		)
		values (#{id,jdbcType=INTEGER}, #{pid,jdbcType=INTEGER},
		#{name,jdbcType=VARCHAR},
		#{description,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, #{holiday,jdbcType=VARCHAR}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.mrbt.lingmoney.model.ProductParam">
		<!-- @mbggenerated -->
		insert into product_param
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="pid != null">
				pid,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="description != null">
				description,
			</if>
			<if test="status != null">
				status,
			</if>
			<if test="holiday != null">
				holiday,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="pid != null">
				#{pid,jdbcType=INTEGER},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="description != null">
				#{description,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				#{status,jdbcType=INTEGER},
			</if>
			<if test="holiday != null">
				#{holiday,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.mrbt.lingmoney.model.ProductParamExample"
		resultType="java.lang.Long">
		<!-- @mbggenerated -->
		select count(*) from product_param
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		<!-- @mbggenerated -->
		update product_param
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.pid != null">
				pid = #{record.pid,jdbcType=INTEGER},
			</if>
			<if test="record.name != null">
				name = #{record.name,jdbcType=VARCHAR},
			</if>
			<if test="record.description != null">
				description = #{record.description,jdbcType=VARCHAR},
			</if>
			<if test="record.status != null">
				status = #{record.status,jdbcType=INTEGER},
			</if>
			<if test="record.holiday != null">
				holiday = #{record.holiday,jdbcType=VARCHAR},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		<!-- @mbggenerated -->
		update product_param
		set id = #{record.id,jdbcType=INTEGER},
		pid = #{record.pid,jdbcType=INTEGER},
		name = #{record.name,jdbcType=VARCHAR},
		description = #{record.description,jdbcType=VARCHAR},
		status = #{record.status,jdbcType=INTEGER},
		holiday = #{record.holiday,jdbcType=VARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.mrbt.lingmoney.model.ProductParam">
		<!-- @mbggenerated -->
		update product_param
		<set>
			<if test="pid != null">
				pid = #{pid,jdbcType=INTEGER},
			</if>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="description != null">
				description = #{description,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=INTEGER},
			</if>
			<if test="holiday != null">
				holiday = #{holiday,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.mrbt.lingmoney.model.ProductParam">
		<!-- @mbggenerated -->
		update product_param
		set pid = #{pid,jdbcType=INTEGER},
		name = #{name,jdbcType=VARCHAR},
		description = #{description,jdbcType=VARCHAR},
		status = #{status,jdbcType=INTEGER},
		holiday = #{holiday,jdbcType=VARCHAR}
		where id = #{id,jdbcType=INTEGER}
	</update>


	<!-- custom setting -->
	<select id="findHolidayList" resultType="java.lang.String">
		select 
			holiday 
		from 
			product_param 
		where 
			pid = 2 and str_to_date(`holiday`,'%Y-%m-%d') >= date_format(now(),'%Y-%m-%d') 
		order by 
			str_to_date(`holiday`, '%Y-%m-%d')
	</select>
</mapper>