<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mrbt.lingmoney.mapper.WalletTransactionFlowMapper">
  <resultMap id="BaseResultMap" type="com.mrbt.lingmoney.model.WalletTransactionFlow">
    <!--
    @mbggenerated
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <id column="u_id" jdbcType="INTEGER" property="uId" />
    <id column="operate_time" jdbcType="TIMESTAMP" property="operateTime" />
    <result column="p_id" jdbcType="INTEGER" property="pId" />
    <result column="t_id" jdbcType="INTEGER" property="tId" />
    <result column="money" jdbcType="DECIMAL" property="money" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="number" jdbcType="VARCHAR" property="number" />
    <result column="redeem_type" jdbcType="INTEGER" property="redeemType" />
    <result column="interest" jdbcType="DECIMAL" property="interest" />
    <result column="buy_type" jdbcType="INTEGER" property="buyType" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
    @mbggenerated
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
    @mbggenerated
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
    @mbggenerated
    -->
    id, u_id, operate_time, p_id, t_id, money, type, state, number, redeem_type, interest, 
    buy_type
  </sql>
  <select id="selectByExample" parameterType="com.mrbt.lingmoney.model.WalletTransactionFlowExample" resultMap="BaseResultMap">
    <!--
    @mbggenerated
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from wallet_transaction_flow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart >= 0">
       limit ${limitStart} , ${limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="com.mrbt.lingmoney.model.WalletTransactionFlowKey" resultMap="BaseResultMap">
    <!--
    @mbggenerated
    -->
    select 
    <include refid="Base_Column_List" />
    from wallet_transaction_flow
    where id = #{id,jdbcType=INTEGER}
      and u_id = #{uId,jdbcType=INTEGER}
      and operate_time = #{operateTime,jdbcType=TIMESTAMP}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.mrbt.lingmoney.model.WalletTransactionFlowKey">
    <!--
    @mbggenerated
    -->
    delete from wallet_transaction_flow
    where id = #{id,jdbcType=INTEGER}
      and u_id = #{uId,jdbcType=INTEGER}
      and operate_time = #{operateTime,jdbcType=TIMESTAMP}
  </delete>
  <delete id="deleteByExample" parameterType="com.mrbt.lingmoney.model.WalletTransactionFlowExample">
    <!--
    @mbggenerated
    -->
    delete from wallet_transaction_flow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.mrbt.lingmoney.model.WalletTransactionFlow">
    <!--
    @mbggenerated
    -->
    insert into wallet_transaction_flow (id, u_id, operate_time, 
      p_id, t_id, money, type, 
      state, number, redeem_type, 
      interest, buy_type)
    values (#{id,jdbcType=INTEGER}, #{uId,jdbcType=INTEGER}, #{operateTime,jdbcType=TIMESTAMP}, 
      #{pId,jdbcType=INTEGER}, #{tId,jdbcType=INTEGER}, #{money,jdbcType=DECIMAL}, #{type,jdbcType=INTEGER}, 
      #{state,jdbcType=INTEGER}, #{number,jdbcType=VARCHAR}, #{redeemType,jdbcType=INTEGER}, 
      #{interest,jdbcType=DECIMAL}, #{buyType,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.mrbt.lingmoney.model.WalletTransactionFlow">
    <!--
    @mbggenerated
    -->
    insert into wallet_transaction_flow
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="uId != null">
        u_id,
      </if>
      <if test="operateTime != null">
        operate_time,
      </if>
      <if test="pId != null">
        p_id,
      </if>
      <if test="tId != null">
        t_id,
      </if>
      <if test="money != null">
        money,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="number != null">
        number,
      </if>
      <if test="redeemType != null">
        redeem_type,
      </if>
      <if test="interest != null">
        interest,
      </if>
      <if test="buyType != null">
        buy_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="uId != null">
        #{uId,jdbcType=INTEGER},
      </if>
      <if test="operateTime != null">
        #{operateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="pId != null">
        #{pId,jdbcType=INTEGER},
      </if>
      <if test="tId != null">
        #{tId,jdbcType=INTEGER},
      </if>
      <if test="money != null">
        #{money,jdbcType=DECIMAL},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="number != null">
        #{number,jdbcType=VARCHAR},
      </if>
      <if test="redeemType != null">
        #{redeemType,jdbcType=INTEGER},
      </if>
      <if test="interest != null">
        #{interest,jdbcType=DECIMAL},
      </if>
      <if test="buyType != null">
        #{buyType,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.mrbt.lingmoney.model.WalletTransactionFlowExample" resultType="java.lang.Long">
    <!--
    @mbggenerated
    -->
    select count(*) from wallet_transaction_flow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
    @mbggenerated
    -->
    update wallet_transaction_flow
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.uId != null">
        u_id = #{record.uId,jdbcType=INTEGER},
      </if>
      <if test="record.operateTime != null">
        operate_time = #{record.operateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.pId != null">
        p_id = #{record.pId,jdbcType=INTEGER},
      </if>
      <if test="record.tId != null">
        t_id = #{record.tId,jdbcType=INTEGER},
      </if>
      <if test="record.money != null">
        money = #{record.money,jdbcType=DECIMAL},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.number != null">
        number = #{record.number,jdbcType=VARCHAR},
      </if>
      <if test="record.redeemType != null">
        redeem_type = #{record.redeemType,jdbcType=INTEGER},
      </if>
      <if test="record.interest != null">
        interest = #{record.interest,jdbcType=DECIMAL},
      </if>
      <if test="record.buyType != null">
        buy_type = #{record.buyType,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
    @mbggenerated
    -->
    update wallet_transaction_flow
    set id = #{record.id,jdbcType=INTEGER},
      u_id = #{record.uId,jdbcType=INTEGER},
      operate_time = #{record.operateTime,jdbcType=TIMESTAMP},
      p_id = #{record.pId,jdbcType=INTEGER},
      t_id = #{record.tId,jdbcType=INTEGER},
      money = #{record.money,jdbcType=DECIMAL},
      type = #{record.type,jdbcType=INTEGER},
      state = #{record.state,jdbcType=INTEGER},
      number = #{record.number,jdbcType=VARCHAR},
      redeem_type = #{record.redeemType,jdbcType=INTEGER},
      interest = #{record.interest,jdbcType=DECIMAL},
      buy_type = #{record.buyType,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.mrbt.lingmoney.model.WalletTransactionFlow">
    <!--
    @mbggenerated
    -->
    update wallet_transaction_flow
    <set>
      <if test="pId != null">
        p_id = #{pId,jdbcType=INTEGER},
      </if>
      <if test="tId != null">
        t_id = #{tId,jdbcType=INTEGER},
      </if>
      <if test="money != null">
        money = #{money,jdbcType=DECIMAL},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="number != null">
        number = #{number,jdbcType=VARCHAR},
      </if>
      <if test="redeemType != null">
        redeem_type = #{redeemType,jdbcType=INTEGER},
      </if>
      <if test="interest != null">
        interest = #{interest,jdbcType=DECIMAL},
      </if>
      <if test="buyType != null">
        buy_type = #{buyType,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
      and u_id = #{uId,jdbcType=INTEGER}
      and operate_time = #{operateTime,jdbcType=TIMESTAMP}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.mrbt.lingmoney.model.WalletTransactionFlow">
    <!--
    @mbggenerated
    -->
    update wallet_transaction_flow
    set p_id = #{pId,jdbcType=INTEGER},
      t_id = #{tId,jdbcType=INTEGER},
      money = #{money,jdbcType=DECIMAL},
      type = #{type,jdbcType=INTEGER},
      state = #{state,jdbcType=INTEGER},
      number = #{number,jdbcType=VARCHAR},
      redeem_type = #{redeemType,jdbcType=INTEGER},
      interest = #{interest,jdbcType=DECIMAL},
      buy_type = #{buyType,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
      and u_id = #{uId,jdbcType=INTEGER}
      and operate_time = #{operateTime,jdbcType=TIMESTAMP}
  </update>
</mapper>