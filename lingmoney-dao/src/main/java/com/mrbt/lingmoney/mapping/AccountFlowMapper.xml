<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mrbt.lingmoney.mapper.AccountFlowMapper">
	<resultMap id="BaseResultMap" type="com.mrbt.lingmoney.model.AccountFlow">
		<!-- @mbggenerated -->
		<id column="id" jdbcType="INTEGER" property="id" />
		<id column="a_id" jdbcType="INTEGER" property="aId" />
		<id column="operate_time" jdbcType="TIMESTAMP" property="operateTime" />
		<result column="t_id" jdbcType="INTEGER" property="tId" />
		<result column="money" jdbcType="DECIMAL" property="money" />
		<result column="fee" jdbcType="DECIMAL" property="fee" />
		<result column="number" jdbcType="VARCHAR" property="number" />
		<result column="status" jdbcType="INTEGER" property="status" />
		<result column="note" jdbcType="VARCHAR" property="note" />
		<result column="type" jdbcType="INTEGER" property="type" />
		<result column="balance" jdbcType="DECIMAL" property="balance" />
		<result column="frozen_money" jdbcType="DECIMAL" property="frozenMoney" />
		<result column="platform" jdbcType="INTEGER" property="platform" />
		<result column="vision" jdbcType="INTEGER" property="vision" />
		<result column="card_pan" jdbcType="VARCHAR" property="cardPan" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<!-- @mbggenerated -->
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<!-- @mbggenerated -->
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		<!-- @mbggenerated -->
		id, a_id, operate_time, t_id, money, fee, number, status, note, type,
		balance, frozen_money,
		platform, vision, card_pan
	</sql>
	<select id="selectByExample" parameterType="com.mrbt.lingmoney.model.AccountFlowExample"
		resultMap="BaseResultMap">
		<!-- @mbggenerated -->
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from account_flow
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
		<if test="limitStart >= 0">
			limit ${limitStart} , ${limitEnd}
		</if>
	</select>
	<select id="selectByPrimaryKey" parameterType="com.mrbt.lingmoney.model.AccountFlowKey"
		resultMap="BaseResultMap">
		<!-- @mbggenerated -->
		select
		<include refid="Base_Column_List" />
		from account_flow
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="com.mrbt.lingmoney.model.AccountFlowKey">
		<!-- @mbggenerated -->
		delete from account_flow
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.mrbt.lingmoney.model.AccountFlowExample">
		<!-- @mbggenerated -->
		delete from account_flow
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.mrbt.lingmoney.model.AccountFlow">
		<!-- @mbggenerated -->
		insert into account_flow (id, a_id, operate_time,
		t_id, money, fee, number,
		status, note, type,
		balance, frozen_money, platform,
		vision, card_pan)
		values (#{id,jdbcType=INTEGER}, #{aId,jdbcType=INTEGER},
		#{operateTime,jdbcType=TIMESTAMP},
		#{tId,jdbcType=INTEGER}, #{money,jdbcType=DECIMAL}, #{fee,jdbcType=DECIMAL},
		#{number,jdbcType=VARCHAR},
		#{status,jdbcType=INTEGER}, #{note,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER},
		#{balance,jdbcType=DECIMAL}, #{frozenMoney,jdbcType=DECIMAL},
		#{platform,jdbcType=INTEGER},
		#{vision,jdbcType=INTEGER}, #{cardPan,jdbcType=VARCHAR})
	</insert>
	<insert id="insertSelective" parameterType="com.mrbt.lingmoney.model.AccountFlow">
		<!-- @mbggenerated -->
		insert into account_flow
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="aId != null">
				a_id,
			</if>
			<if test="operateTime != null">
				operate_time,
			</if>
			<if test="tId != null">
				t_id,
			</if>
			<if test="money != null">
				money,
			</if>
			<if test="fee != null">
				fee,
			</if>
			<if test="number != null">
				number,
			</if>
			<if test="status != null">
				status,
			</if>
			<if test="note != null">
				note,
			</if>
			<if test="type != null">
				type,
			</if>
			<if test="balance != null">
				balance,
			</if>
			<if test="frozenMoney != null">
				frozen_money,
			</if>
			<if test="platform != null">
				platform,
			</if>
			<if test="vision != null">
				vision,
			</if>
			<if test="cardPan != null">
				card_pan,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="aId != null">
				#{aId,jdbcType=INTEGER},
			</if>
			<if test="operateTime != null">
				#{operateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="tId != null">
				#{tId,jdbcType=INTEGER},
			</if>
			<if test="money != null">
				#{money,jdbcType=DECIMAL},
			</if>
			<if test="fee != null">
				#{fee,jdbcType=DECIMAL},
			</if>
			<if test="number != null">
				#{number,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				#{status,jdbcType=INTEGER},
			</if>
			<if test="note != null">
				#{note,jdbcType=VARCHAR},
			</if>
			<if test="type != null">
				#{type,jdbcType=INTEGER},
			</if>
			<if test="balance != null">
				#{balance,jdbcType=DECIMAL},
			</if>
			<if test="frozenMoney != null">
				#{frozenMoney,jdbcType=DECIMAL},
			</if>
			<if test="platform != null">
				#{platform,jdbcType=INTEGER},
			</if>
			<if test="vision != null">
				#{vision,jdbcType=INTEGER},
			</if>
			<if test="cardPan != null">
				#{cardPan,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.mrbt.lingmoney.model.AccountFlowExample"
		resultType="java.lang.Long">
		<!-- @mbggenerated -->
		select count(*) from account_flow
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		<!-- @mbggenerated -->
		update account_flow
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.aId != null">
				a_id = #{record.aId,jdbcType=INTEGER},
			</if>
			<if test="record.operateTime != null">
				operate_time = #{record.operateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.tId != null">
				t_id = #{record.tId,jdbcType=INTEGER},
			</if>
			<if test="record.money != null">
				money = #{record.money,jdbcType=DECIMAL},
			</if>
			<if test="record.fee != null">
				fee = #{record.fee,jdbcType=DECIMAL},
			</if>
			<if test="record.number != null">
				number = #{record.number,jdbcType=VARCHAR},
			</if>
			<if test="record.status != null">
				status = #{record.status,jdbcType=INTEGER},
			</if>
			<if test="record.note != null">
				note = #{record.note,jdbcType=VARCHAR},
			</if>
			<if test="record.type != null">
				type = #{record.type,jdbcType=INTEGER},
			</if>
			<if test="record.balance != null">
				balance = #{record.balance,jdbcType=DECIMAL},
			</if>
			<if test="record.frozenMoney != null">
				frozen_money = #{record.frozenMoney,jdbcType=DECIMAL},
			</if>
			<if test="record.platform != null">
				platform = #{record.platform,jdbcType=INTEGER},
			</if>
			<if test="record.vision != null">
				vision = #{record.vision,jdbcType=INTEGER},
			</if>
			<if test="record.cardPan != null">
				card_pan = #{record.cardPan,jdbcType=VARCHAR},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByAccountFlowId" parameterType="map">
		<!-- @mbggenerated -->
		update account_flow
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.aId != null">
				a_id = #{record.aId,jdbcType=INTEGER},
			</if>
			<if test="record.operateTime != null">
				operate_time = #{record.operateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.tId != null">
				t_id = #{record.tId,jdbcType=INTEGER},
			</if>
			<if test="record.money != null">
				money = #{record.money,jdbcType=DECIMAL},
			</if>
			<if test="record.fee != null">
				fee = #{record.fee,jdbcType=DECIMAL},
			</if>
			<if test="record.number != null">
				number = #{record.number,jdbcType=VARCHAR},
			</if>
			<if test="record.status != null">
				status = #{record.status,jdbcType=INTEGER},
			</if>
			<if test="record.note != null">
				note = #{record.note,jdbcType=VARCHAR},
			</if>
			<if test="record.type != null">
				type = #{record.type,jdbcType=INTEGER},
			</if>
			<if test="record.balance != null">
				balance = #{record.balance,jdbcType=DECIMAL},
			</if>
			<if test="record.frozenMoney != null">
				frozen_money = #{record.frozenMoney,jdbcType=DECIMAL},
			</if>
			<if test="record.platform != null">
				platform = #{record.platform,jdbcType=INTEGER},
			</if>
			<if test="record.vision != null">
				vision = #{record.vision,jdbcType=INTEGER},
			</if>
			<if test="record.cardPan != null">
				card_pan = #{record.cardPan,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{id}
	</update>
	<update id="updateByExample" parameterType="map">
		<!-- @mbggenerated -->
		update account_flow
		set id = #{record.id,jdbcType=INTEGER},
		a_id = #{record.aId,jdbcType=INTEGER},
		operate_time = #{record.operateTime,jdbcType=TIMESTAMP},
		t_id = #{record.tId,jdbcType=INTEGER},
		money = #{record.money,jdbcType=DECIMAL},
		fee = #{record.fee,jdbcType=DECIMAL},
		number = #{record.number,jdbcType=VARCHAR},
		status = #{record.status,jdbcType=INTEGER},
		note = #{record.note,jdbcType=VARCHAR},
		type = #{record.type,jdbcType=INTEGER},
		balance = #{record.balance,jdbcType=DECIMAL},
		frozen_money = #{record.frozenMoney,jdbcType=DECIMAL},
		platform = #{record.platform,jdbcType=INTEGER},
		vision = #{record.vision,jdbcType=INTEGER},
		card_pan = #{record.cardPan,jdbcType=VARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.mrbt.lingmoney.model.AccountFlow">
		<!-- @mbggenerated -->
		update account_flow
		<set>
			<if test="tId != null">
				t_id = #{tId,jdbcType=INTEGER},
			</if>
			<if test="money != null">
				money = #{money,jdbcType=DECIMAL},
			</if>
			<if test="fee != null">
				fee = #{fee,jdbcType=DECIMAL},
			</if>
			<if test="number != null">
				number = #{number,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=INTEGER},
			</if>
			<if test="note != null">
				note = #{note,jdbcType=VARCHAR},
			</if>
			<if test="type != null">
				type = #{type,jdbcType=INTEGER},
			</if>
			<if test="balance != null">
				balance = #{balance,jdbcType=DECIMAL},
			</if>
			<if test="frozenMoney != null">
				frozen_money = #{frozenMoney,jdbcType=DECIMAL},
			</if>
			<if test="platform != null">
				platform = #{platform,jdbcType=INTEGER},
			</if>
			<if test="vision != null">
				vision = #{vision,jdbcType=INTEGER},
			</if>
			<if test="cardPan != null">
				card_pan = #{cardPan,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.mrbt.lingmoney.model.AccountFlow">
		<!-- @mbggenerated -->
		update account_flow
		set t_id = #{tId,jdbcType=INTEGER},
		money = #{money,jdbcType=DECIMAL},
		fee = #{fee,jdbcType=DECIMAL},
		number = #{number,jdbcType=VARCHAR},
		status = #{status,jdbcType=INTEGER},
		note = #{note,jdbcType=VARCHAR},
		type = #{type,jdbcType=INTEGER},
		balance = #{balance,jdbcType=DECIMAL},
		frozen_money = #{frozenMoney,jdbcType=DECIMAL},
		platform = #{platform,jdbcType=INTEGER},
		vision = #{vision,jdbcType=INTEGER},
		card_pan = #{cardPan,jdbcType=VARCHAR}
		where id = #{id,jdbcType=INTEGER}
	</update>


	<!-- custom setting -->
	<insert id="saveAccountFlowInterest" parameterType="java.util.Map">
		insert into
		account_flow (t_id, a_id, operate_time, money, status, note, type, platform)
		select
		#{tid,jdbcType=INTEGER}, ac.id, now(), #{interest,jdbcType=DECIMAL}, 1, '随心取付息', 2, 0
		from
		users_account ac
		where
		ac.u_id = #{uid, jdbcType=VARCHAR}
	</insert>

	<select id="selectAccountFlowOfRechargeByUserId" resultType="java.lang.Integer">
		SELECT COUNT(1)
		FROM trading t
		WHERE t.pc_id != 17
		AND t.status IN (1,2,3,4)
		AND t.u_id = #{userId}
	</select>

	<select id="selectByUidAndTypeAndStatus" resultType="java.math.BigDecimal">
		select 
		sum(tra.financial_money) 
		from 
		trading as tra 
		left join product as pro on tra.p_id = pro.id 
		left join users_red_packet as 
		urp on tra.id = urp.t_id 
		left join hx_red_packet as hrp on urp.rp_id = 
		hrp.id 
		where 
		p_id != 1 and pro.p_type = 2  
		<if test="uid!=null">
			and tra.u_id = #{uid,jdbcType=VARCHAR}
		</if>
		<if test="status!=null">
			and tra.`status` = #{status,jdbcType=INTEGER}
		</if>
	</select>

	<select id="getWithdrawalsFrozenAmount" resultType="java.math.BigDecimal">
		SELECT SUM(af.money)
		FROM account_flow af, users_account ua
		WHERE af.a_id = ua.id AND ua.u_id = #{uid, jdbcType=VARCHAR} AND af.type = 1
		AND af.status = 0
	</select>

	<select id="findUserFinanceOfToday" resultType="java.util.Map">
		SELECT af.money, af.operate_time, af.t_id
		FROM account_flow af, users_account ua
		WHERE af.a_id = ua.id
		AND ua.u_id = #{uId}
		AND af.operate_time BETWEEN #{financeDateStart} AND #{financeDateEnd}
		AND af.status = 5
		AND af.type = 2
		ORDER BY af.operate_time
	</select>
	
	<select id="findByNumber" parameterType="java.lang.String"
		resultMap="BaseResultMap">
		select * from account_flow
		where number = #{number}
	</select>
	
	<select id="listFrozenMoneyDetail" parameterType="java.util.Map" resultType="java.util.Map">
	    SELECT 
			af.`status` stat, af.money money, af.`type`, 
			CASE af.`type` WHEN 1 THEN '提现' WHEN 2 THEN p.name ELSE '' END AS typeName, 
			CASE af.`status` WHEN 0 THEN '处理中' WHEN 5 THEN '冻结中' WHEN 7 THEN '支付中' ELSE '' END statName
		FROM account_flow af
		LEFT JOIN users_account ua on af.a_id = ua.id
		LEFT JOIN trading t ON af.t_id = t.id
		LEFT JOIN product p ON t.p_id = p.id
		WHERE 
		  ((af.status IN (5, 7) AND af.type = 2) OR (af.status = 0 AND af.type = 1)) AND af.operate_time > '2018-01-01 00:00:00'
		  AND ua.u_id = #{uid, jdbcType=VARCHAR}
		ORDER BY 
		  af.operate_time DESC
		LIMIT #{start, jdbcType=INTEGER}, #{number, jdbcType=INTEGER}
	</select>
	
	<select id="countListFrozenMoneyDetail" parameterType="java.util.Map" resultType="java.lang.Integer">
        SELECT 
            count(1)
        FROM account_flow af
        LEFT JOIN users_account ua on af.a_id = ua.id
        LEFT JOIN trading t ON af.t_id = t.id
        LEFT JOIN product p ON t.p_id = p.id
        WHERE 
          ((af.status IN (5, 7) AND af.type = 2) OR (af.status = 0 AND af.type = 1)) AND af.operate_time > '2018-01-01 00:00:00'
          AND ua.u_id = #{uid, jdbcType=VARCHAR}
    </select>
</mapper>