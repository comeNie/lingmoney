package com.mrbt.lingmoney.model;

import java.io.Serializable;
import java.util.Date;

public class AppPushMsg implements Serializable {
    /**
     * 
     * 表字段 : app_push_msg.id
     */
    private Integer id;

    /**
     * 消息标题
     * 表字段 : app_push_msg.msg_title
     */
    private String msgTitle;

    /**
     * 消息内容
     * 表字段 : app_push_msg.msg_content
     */
    private String msgContent;

    /**
     * 发送的用户类型，0：全部用户，1：指定用户
     * 表字段 : app_push_msg.user_group
     */
    private Integer userGroup;

    /**
     * 用户群sql
     * 表字段 : app_push_msg.user_group_sql
     */
    private String userGroupSql;

    /**
     * 指定打开的页面
     * 表字段 : app_push_msg.open_page
     */
    private String openPage;

    /**
     * 指定打开的url
     * 表字段 : app_push_msg.open_url
     */
    private String openUrl;

    /**
     * 点击后的行为，0：打开应用；1：打开指定页面；2：打开链接
     * 表字段 : app_push_msg.open_action
     */
    private Integer openAction;

    /**
     * 推送时间
     * 表字段 : app_push_msg.add_time
     */
    private Date addTime;

    /**
     * 消息状态，0：未发送；1：已发送；2：已删除
     * 表字段 : app_push_msg.status
     */
    private Integer status;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table app_push_msg
     *
     * @mbggenerated
     */
    private static final long serialVersionUID = 1L;

    /**
     * 获取  字段:app_push_msg.id
     *
     * @return app_push_msg.id, 
     */
    public Integer getId() {
        return id;
    }

    /**
     * 设置  字段:app_push_msg.id
     *
     * @param id the value for app_push_msg.id, 
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * 获取 消息标题 字段:app_push_msg.msg_title
     *
     * @return app_push_msg.msg_title, 消息标题
     */
    public String getMsgTitle() {
        return msgTitle;
    }

    /**
     * 设置 消息标题 字段:app_push_msg.msg_title
     *
     * @param msgTitle the value for app_push_msg.msg_title, 消息标题
     */
    public void setMsgTitle(String msgTitle) {
        this.msgTitle = msgTitle == null ? null : msgTitle.trim();
    }

    /**
     * 获取 消息内容 字段:app_push_msg.msg_content
     *
     * @return app_push_msg.msg_content, 消息内容
     */
    public String getMsgContent() {
        return msgContent;
    }

    /**
     * 设置 消息内容 字段:app_push_msg.msg_content
     *
     * @param msgContent the value for app_push_msg.msg_content, 消息内容
     */
    public void setMsgContent(String msgContent) {
        this.msgContent = msgContent == null ? null : msgContent.trim();
    }

    /**
     * 获取 发送的用户类型，0：全部用户，1：指定用户 字段:app_push_msg.user_group
     *
     * @return app_push_msg.user_group, 发送的用户类型，0：全部用户，1：指定用户
     */
    public Integer getUserGroup() {
        return userGroup;
    }

    /**
     * 设置 发送的用户类型，0：全部用户，1：指定用户 字段:app_push_msg.user_group
     *
     * @param userGroup the value for app_push_msg.user_group, 发送的用户类型，0：全部用户，1：指定用户
     */
    public void setUserGroup(Integer userGroup) {
        this.userGroup = userGroup;
    }

    /**
     * 获取 用户群sql 字段:app_push_msg.user_group_sql
     *
     * @return app_push_msg.user_group_sql, 用户群sql
     */
    public String getUserGroupSql() {
        return userGroupSql;
    }

    /**
     * 设置 用户群sql 字段:app_push_msg.user_group_sql
     *
     * @param userGroupSql the value for app_push_msg.user_group_sql, 用户群sql
     */
    public void setUserGroupSql(String userGroupSql) {
        this.userGroupSql = userGroupSql == null ? null : userGroupSql.trim();
    }

    /**
     * 获取 指定打开的页面 字段:app_push_msg.open_page
     *
     * @return app_push_msg.open_page, 指定打开的页面
     */
    public String getOpenPage() {
        return openPage;
    }

    /**
     * 设置 指定打开的页面 字段:app_push_msg.open_page
     *
     * @param openPage the value for app_push_msg.open_page, 指定打开的页面
     */
    public void setOpenPage(String openPage) {
        this.openPage = openPage == null ? null : openPage.trim();
    }

    /**
     * 获取 指定打开的url 字段:app_push_msg.open_url
     *
     * @return app_push_msg.open_url, 指定打开的url
     */
    public String getOpenUrl() {
        return openUrl;
    }

    /**
     * 设置 指定打开的url 字段:app_push_msg.open_url
     *
     * @param openUrl the value for app_push_msg.open_url, 指定打开的url
     */
    public void setOpenUrl(String openUrl) {
        this.openUrl = openUrl == null ? null : openUrl.trim();
    }

    /**
     * 获取 点击后的行为，0：打开应用；1：打开指定页面；2：打开链接 字段:app_push_msg.open_action
     *
     * @return app_push_msg.open_action, 点击后的行为，0：打开应用；1：打开指定页面；2：打开链接
     */
    public Integer getOpenAction() {
        return openAction;
    }

    /**
     * 设置 点击后的行为，0：打开应用；1：打开指定页面；2：打开链接 字段:app_push_msg.open_action
     *
     * @param openAction the value for app_push_msg.open_action, 点击后的行为，0：打开应用；1：打开指定页面；2：打开链接
     */
    public void setOpenAction(Integer openAction) {
        this.openAction = openAction;
    }

    /**
     * 获取 操作时间 字段:app_push_msg.add_time
     *
     * @return app_push_msg.add_time, 操作时间
     */
    public Date getAddTime() {
        return addTime;
    }

    /**
     * 设置 操作时间 字段:app_push_msg.add_time
     *
     * @param addTime the value for app_push_msg.add_time, 操作时间
     */
    public void setAddTime(Date addTime) {
        this.addTime = addTime;
    }

    /**
     * 获取 消息状态，0：未发送；1：已发送 字段:app_push_msg.status
     *
     * @return app_push_msg.status, 消息状态，0：未发送；1：已发送
     */
    public Integer getStatus() {
        return status;
    }

    /**
     * 设置 消息状态，0：未发送；1：已发送 字段:app_push_msg.status
     *
     * @param status the value for app_push_msg.status, 消息状态，0：未发送；1：已发送
     */
    public void setStatus(Integer status) {
        this.status = status;
    }

    /**
     * ,app_push_msg
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash = ").append(hashCode());
        sb.append(", id=").append(id);
        sb.append(", msgTitle=").append(msgTitle);
        sb.append(", msgContent=").append(msgContent);
        sb.append(", userGroup=").append(userGroup);
        sb.append(", userGroupSql=").append(userGroupSql);
        sb.append(", openPage=").append(openPage);
        sb.append(", openUrl=").append(openUrl);
        sb.append(", openAction=").append(openAction);
        sb.append(", addTime=").append(addTime);
        sb.append(", status=").append(status);
        sb.append("]");
        return sb.toString();
    }
}