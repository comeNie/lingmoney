package com.mrbt.lingmoney.model;

import java.io.Serializable;
import java.math.BigDecimal;

public class WalletTransactionFlow extends WalletTransactionFlowKey implements Serializable {
    /**
     * 产品id
     * 表字段 : wallet_transaction_flow.p_id
     */
    private Integer pId;

    /**
     * 交易id
     * 表字段 : wallet_transaction_flow.t_id
     */
    private Integer tId;

    /**
     * 交易金额
     * 表字段 : wallet_transaction_flow.money
     */
    private BigDecimal money;

    /**
     * 交易类型：0买,1卖,2付息
     * 表字段 : wallet_transaction_flow.type
     */
    private Integer type;

    /**
     * 状态：0失败,1成功,2待处理,3冻结状态
     * 表字段 : wallet_transaction_flow.state
     */
    private Integer state;

    /**
     * 序列号
     * 表字段 : wallet_transaction_flow.number
     */
    private String number;

    /**
     * 赎回类型：0普通赎回,1全部赎回
     * 表字段 : wallet_transaction_flow.redeem_type
     */
    private Integer redeemType;

    /**
     * 利息
     * 表字段 : wallet_transaction_flow.interest
     */
    private BigDecimal interest;

    /**
     * 0:用户购买，1：平台自动购买
     * 表字段 : wallet_transaction_flow.buy_type
     */
    private Integer buyType;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table wallet_transaction_flow
     *
     * @mbg.generated
     */
    private static final long serialVersionUID = 1L;

    /**
     * 获取 产品id 字段:wallet_transaction_flow.p_id
     *
     * @return wallet_transaction_flow.p_id, 产品id
     */
    public Integer getpId() {
        return pId;
    }

    /**
     * 设置 产品id 字段:wallet_transaction_flow.p_id
     *
     * @param pId the value for wallet_transaction_flow.p_id, 产品id
     */
    public void setpId(Integer pId) {
        this.pId = pId;
    }

    /**
     * 获取 交易id 字段:wallet_transaction_flow.t_id
     *
     * @return wallet_transaction_flow.t_id, 交易id
     */
    public Integer gettId() {
        return tId;
    }

    /**
     * 设置 交易id 字段:wallet_transaction_flow.t_id
     *
     * @param tId the value for wallet_transaction_flow.t_id, 交易id
     */
    public void settId(Integer tId) {
        this.tId = tId;
    }

    /**
     * 获取 交易金额 字段:wallet_transaction_flow.money
     *
     * @return wallet_transaction_flow.money, 交易金额
     */
    public BigDecimal getMoney() {
        return money;
    }

    /**
     * 设置 交易金额 字段:wallet_transaction_flow.money
     *
     * @param money the value for wallet_transaction_flow.money, 交易金额
     */
    public void setMoney(BigDecimal money) {
        this.money = money;
    }

    /**
     * 获取 交易类型：0买,1卖,2付息 字段:wallet_transaction_flow.type
     *
     * @return wallet_transaction_flow.type, 交易类型：0买,1卖,2付息
     */
    public Integer getType() {
        return type;
    }

    /**
     * 设置 交易类型：0买,1卖,2付息 字段:wallet_transaction_flow.type
     *
     * @param type the value for wallet_transaction_flow.type, 交易类型：0买,1卖,2付息
     */
    public void setType(Integer type) {
        this.type = type;
    }

    /**
     * 获取 状态：0失败,1成功,2待处理,3冻结状态 字段:wallet_transaction_flow.state
     *
     * @return wallet_transaction_flow.state, 状态：0失败,1成功,2待处理,3冻结状态
     */
    public Integer getState() {
        return state;
    }

    /**
     * 设置 状态：0失败,1成功,2待处理,3冻结状态 字段:wallet_transaction_flow.state
     *
     * @param state the value for wallet_transaction_flow.state, 状态：0失败,1成功,2待处理,3冻结状态
     */
    public void setState(Integer state) {
        this.state = state;
    }

    /**
     * 获取 序列号 字段:wallet_transaction_flow.number
     *
     * @return wallet_transaction_flow.number, 序列号
     */
    public String getNumber() {
        return number;
    }

    /**
     * 设置 序列号 字段:wallet_transaction_flow.number
     *
     * @param number the value for wallet_transaction_flow.number, 序列号
     */
    public void setNumber(String number) {
        this.number = number == null ? null : number.trim();
    }

    /**
     * 获取 赎回类型：0普通赎回,1全部赎回 字段:wallet_transaction_flow.redeem_type
     *
     * @return wallet_transaction_flow.redeem_type, 赎回类型：0普通赎回,1全部赎回
     */
    public Integer getRedeemType() {
        return redeemType;
    }

    /**
     * 设置 赎回类型：0普通赎回,1全部赎回 字段:wallet_transaction_flow.redeem_type
     *
     * @param redeemType the value for wallet_transaction_flow.redeem_type, 赎回类型：0普通赎回,1全部赎回
     */
    public void setRedeemType(Integer redeemType) {
        this.redeemType = redeemType;
    }

    /**
     * 获取 利息 字段:wallet_transaction_flow.interest
     *
     * @return wallet_transaction_flow.interest, 利息
     */
    public BigDecimal getInterest() {
        return interest;
    }

    /**
     * 设置 利息 字段:wallet_transaction_flow.interest
     *
     * @param interest the value for wallet_transaction_flow.interest, 利息
     */
    public void setInterest(BigDecimal interest) {
        this.interest = interest;
    }

    /**
     * 获取 0:用户购买，1：平台自动购买 字段:wallet_transaction_flow.buy_type
     *
     * @return wallet_transaction_flow.buy_type, 0:用户购买，1：平台自动购买
     */
    public Integer getBuyType() {
        return buyType;
    }

    /**
     * 设置 0:用户购买，1：平台自动购买 字段:wallet_transaction_flow.buy_type
     *
     * @param buyType the value for wallet_transaction_flow.buy_type, 0:用户购买，1：平台自动购买
     */
    public void setBuyType(Integer buyType) {
        this.buyType = buyType;
    }

    /**
     * ,wallet_transaction_flow
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash = ").append(hashCode());
        sb.append(", pId=").append(pId);
        sb.append(", tId=").append(tId);
        sb.append(", money=").append(money);
        sb.append(", type=").append(type);
        sb.append(", state=").append(state);
        sb.append(", number=").append(number);
        sb.append(", redeemType=").append(redeemType);
        sb.append(", interest=").append(interest);
        sb.append(", buyType=").append(buyType);
        sb.append("]");
        return sb.toString();
    }
}