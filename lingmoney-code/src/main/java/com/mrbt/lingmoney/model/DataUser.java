package com.mrbt.lingmoney.model;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;

public class DataUser implements Serializable {
    /**
     * 
     * 表字段 : data_user.u_id
     */
    private String uId;

    /**
     * 用户星座
     * 表字段 : data_user.constellation
     */
    private String constellation;

    /**
     * 星座个数
     * 表字段 : data_user.constellation_num
     */
    private Integer constellationNum;

    /**
     * 注册日期
     * 表字段 : data_user.reg_date
     */
    private Date regDate;

    /**
     * 注册到现在的天数
     * 表字段 : data_user.reg_diffday
     */
    private Integer regDiffday;

    /**
     * 第几个注册领钱的
     * 表字段 : data_user.reg_level
     */
    private Integer regLevel;

    /**
     * 第一次购买的产品名称
     * 表字段 : data_user.product_name
     */
    private String productName;

    /**
     * 第一次购买金额
     * 表字段 : data_user.financial_money
     */
    private BigDecimal financialMoney;

    /**
     * 第一次购买产品收益
     * 表字段 : data_user.income
     */
    private BigDecimal income;

    /**
     * 购买时间
     * 表字段 : data_user.buy_date
     */
    private Date buyDate;

    /**
     * 累计购买了多少次产品
     * 表字段 : data_user.num
     */
    private Integer num;

    /**
     * 总购买金额
     * 表字段 : data_user.total_finance
     */
    private BigDecimal totalFinance;

    /**
     * 总收益
     * 表字段 : data_user.total_income
     */
    private BigDecimal totalIncome;

    /**
     * 总投资金额数排名（用%的形式表达,例子：成功地击败了领钱儿星球上13%的住户（理财金额排名））
     * 表字段 : data_user.beat_percent
     */
    private BigDecimal beatPercent;

    /**
     * 投资最多的月份
     * 表字段 : data_user.most_buy_month
     */
    private String mostBuyMonth;

    /**
     * 投资最多的月份总购买金额
     * 表字段 : data_user.most_buy_month_money
     */
    private BigDecimal mostBuyMonthMoney;

    /**
     * 财富值：用户的投资总金额和500万相比
     * 表字段 : data_user.finaicial_percent
     */
    private BigDecimal finaicialPercent;

    /**
     * 活力值：购买活动产品的次数比
     * 表字段 : data_user.activity_percent
     */
    private BigDecimal activityPercent;

    /**
     * 吸金力：总收益的百分比
     * 表字段 : data_user.income_percent
     */
    private BigDecimal incomePercent;

    /**
     * 领袖力：以用户购买长期理财产品的数量来做百分比 （4个月（含）以上产品）
     * 表字段 : data_user.long_term_percent
     */
    private BigDecimal longTermPercent;

    /**
     * 决断力：以用户购买短期理财产品的数量来做百分比 （4个月以下产品）
     * 表字段 : data_user.short_term_percent
     */
    private BigDecimal shortTermPercent;

    /**
     * 0-2点交易次数
     * 表字段 : data_user.trading_point_three
     */
    private Integer tradingPointThree;

    /**
     * 3-5点交易次数
     * 表字段 : data_user.trading_point_six
     */
    private Integer tradingPointSix;

    /**
     * 6-8点交易次数
     * 表字段 : data_user.trading_point_nine
     */
    private Integer tradingPointNine;

    /**
     * 9-11点交易次数
     * 表字段 : data_user.trading_point_twelve
     */
    private Integer tradingPointTwelve;

    /**
     * 12-14点交易次数
     * 表字段 : data_user.trading_point_fifteen
     */
    private Integer tradingPointFifteen;

    /**
     * 15-17点交易次数
     * 表字段 : data_user.trading_point_eighteen
     */
    private Integer tradingPointEighteen;

    /**
     * 18-20点交易次数
     * 表字段 : data_user.trading_point_twentyone
     */
    private Integer tradingPointTwentyone;

    /**
     * 21-23点交易次数
     * 表字段 : data_user.trading_point_twentyfour
     */
    private Integer tradingPointTwentyfour;

    /**
     * 最活跃的时段（上午、下午、晚上、夜里）
     * 表字段 : data_user.trading_active
     */
    private String tradingActive;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table data_user
     *
     * @mbg.generated
     */
    private static final long serialVersionUID = 1L;

    /**
     * 获取  字段:data_user.u_id
     *
     * @return data_user.u_id, 
     */
    public String getuId() {
        return uId;
    }

    /**
     * 设置  字段:data_user.u_id
     *
     * @param uId the value for data_user.u_id, 
     */
    public void setuId(String uId) {
        this.uId = uId == null ? null : uId.trim();
    }

    /**
     * 获取 用户星座 字段:data_user.constellation
     *
     * @return data_user.constellation, 用户星座
     */
    public String getConstellation() {
        return constellation;
    }

    /**
     * 设置 用户星座 字段:data_user.constellation
     *
     * @param constellation the value for data_user.constellation, 用户星座
     */
    public void setConstellation(String constellation) {
        this.constellation = constellation == null ? null : constellation.trim();
    }

    /**
     * 获取 星座个数 字段:data_user.constellation_num
     *
     * @return data_user.constellation_num, 星座个数
     */
    public Integer getConstellationNum() {
        return constellationNum;
    }

    /**
     * 设置 星座个数 字段:data_user.constellation_num
     *
     * @param constellationNum the value for data_user.constellation_num, 星座个数
     */
    public void setConstellationNum(Integer constellationNum) {
        this.constellationNum = constellationNum;
    }

    /**
     * 获取 注册日期 字段:data_user.reg_date
     *
     * @return data_user.reg_date, 注册日期
     */
    public Date getRegDate() {
        return regDate;
    }

    /**
     * 设置 注册日期 字段:data_user.reg_date
     *
     * @param regDate the value for data_user.reg_date, 注册日期
     */
    public void setRegDate(Date regDate) {
        this.regDate = regDate;
    }

    /**
     * 获取 注册到现在的天数 字段:data_user.reg_diffday
     *
     * @return data_user.reg_diffday, 注册到现在的天数
     */
    public Integer getRegDiffday() {
        return regDiffday;
    }

    /**
     * 设置 注册到现在的天数 字段:data_user.reg_diffday
     *
     * @param regDiffday the value for data_user.reg_diffday, 注册到现在的天数
     */
    public void setRegDiffday(Integer regDiffday) {
        this.regDiffday = regDiffday;
    }

    /**
     * 获取 第几个注册领钱的 字段:data_user.reg_level
     *
     * @return data_user.reg_level, 第几个注册领钱的
     */
    public Integer getRegLevel() {
        return regLevel;
    }

    /**
     * 设置 第几个注册领钱的 字段:data_user.reg_level
     *
     * @param regLevel the value for data_user.reg_level, 第几个注册领钱的
     */
    public void setRegLevel(Integer regLevel) {
        this.regLevel = regLevel;
    }

    /**
     * 获取 第一次购买的产品名称 字段:data_user.product_name
     *
     * @return data_user.product_name, 第一次购买的产品名称
     */
    public String getProductName() {
        return productName;
    }

    /**
     * 设置 第一次购买的产品名称 字段:data_user.product_name
     *
     * @param productName the value for data_user.product_name, 第一次购买的产品名称
     */
    public void setProductName(String productName) {
        this.productName = productName == null ? null : productName.trim();
    }

    /**
     * 获取 第一次购买金额 字段:data_user.financial_money
     *
     * @return data_user.financial_money, 第一次购买金额
     */
    public BigDecimal getFinancialMoney() {
        return financialMoney;
    }

    /**
     * 设置 第一次购买金额 字段:data_user.financial_money
     *
     * @param financialMoney the value for data_user.financial_money, 第一次购买金额
     */
    public void setFinancialMoney(BigDecimal financialMoney) {
        this.financialMoney = financialMoney;
    }

    /**
     * 获取 第一次购买产品收益 字段:data_user.income
     *
     * @return data_user.income, 第一次购买产品收益
     */
    public BigDecimal getIncome() {
        return income;
    }

    /**
     * 设置 第一次购买产品收益 字段:data_user.income
     *
     * @param income the value for data_user.income, 第一次购买产品收益
     */
    public void setIncome(BigDecimal income) {
        this.income = income;
    }

    /**
     * 获取 购买时间 字段:data_user.buy_date
     *
     * @return data_user.buy_date, 购买时间
     */
    public Date getBuyDate() {
        return buyDate;
    }

    /**
     * 设置 购买时间 字段:data_user.buy_date
     *
     * @param buyDate the value for data_user.buy_date, 购买时间
     */
    public void setBuyDate(Date buyDate) {
        this.buyDate = buyDate;
    }

    /**
     * 获取 累计购买了多少次产品 字段:data_user.num
     *
     * @return data_user.num, 累计购买了多少次产品
     */
    public Integer getNum() {
        return num;
    }

    /**
     * 设置 累计购买了多少次产品 字段:data_user.num
     *
     * @param num the value for data_user.num, 累计购买了多少次产品
     */
    public void setNum(Integer num) {
        this.num = num;
    }

    /**
     * 获取 总购买金额 字段:data_user.total_finance
     *
     * @return data_user.total_finance, 总购买金额
     */
    public BigDecimal getTotalFinance() {
        return totalFinance;
    }

    /**
     * 设置 总购买金额 字段:data_user.total_finance
     *
     * @param totalFinance the value for data_user.total_finance, 总购买金额
     */
    public void setTotalFinance(BigDecimal totalFinance) {
        this.totalFinance = totalFinance;
    }

    /**
     * 获取 总收益 字段:data_user.total_income
     *
     * @return data_user.total_income, 总收益
     */
    public BigDecimal getTotalIncome() {
        return totalIncome;
    }

    /**
     * 设置 总收益 字段:data_user.total_income
     *
     * @param totalIncome the value for data_user.total_income, 总收益
     */
    public void setTotalIncome(BigDecimal totalIncome) {
        this.totalIncome = totalIncome;
    }

    /**
     * 获取 总投资金额数排名（用%的形式表达,例子：成功地击败了领钱儿星球上13%的住户（理财金额排名）） 字段:data_user.beat_percent
     *
     * @return data_user.beat_percent, 总投资金额数排名（用%的形式表达,例子：成功地击败了领钱儿星球上13%的住户（理财金额排名））
     */
    public BigDecimal getBeatPercent() {
        return beatPercent;
    }

    /**
     * 设置 总投资金额数排名（用%的形式表达,例子：成功地击败了领钱儿星球上13%的住户（理财金额排名）） 字段:data_user.beat_percent
     *
     * @param beatPercent the value for data_user.beat_percent, 总投资金额数排名（用%的形式表达,例子：成功地击败了领钱儿星球上13%的住户（理财金额排名））
     */
    public void setBeatPercent(BigDecimal beatPercent) {
        this.beatPercent = beatPercent;
    }

    /**
     * 获取 投资最多的月份 字段:data_user.most_buy_month
     *
     * @return data_user.most_buy_month, 投资最多的月份
     */
    public String getMostBuyMonth() {
        return mostBuyMonth;
    }

    /**
     * 设置 投资最多的月份 字段:data_user.most_buy_month
     *
     * @param mostBuyMonth the value for data_user.most_buy_month, 投资最多的月份
     */
    public void setMostBuyMonth(String mostBuyMonth) {
        this.mostBuyMonth = mostBuyMonth == null ? null : mostBuyMonth.trim();
    }

    /**
     * 获取 投资最多的月份总购买金额 字段:data_user.most_buy_month_money
     *
     * @return data_user.most_buy_month_money, 投资最多的月份总购买金额
     */
    public BigDecimal getMostBuyMonthMoney() {
        return mostBuyMonthMoney;
    }

    /**
     * 设置 投资最多的月份总购买金额 字段:data_user.most_buy_month_money
     *
     * @param mostBuyMonthMoney the value for data_user.most_buy_month_money, 投资最多的月份总购买金额
     */
    public void setMostBuyMonthMoney(BigDecimal mostBuyMonthMoney) {
        this.mostBuyMonthMoney = mostBuyMonthMoney;
    }

    /**
     * 获取 财富值：用户的投资总金额和500万相比 字段:data_user.finaicial_percent
     *
     * @return data_user.finaicial_percent, 财富值：用户的投资总金额和500万相比
     */
    public BigDecimal getFinaicialPercent() {
        return finaicialPercent;
    }

    /**
     * 设置 财富值：用户的投资总金额和500万相比 字段:data_user.finaicial_percent
     *
     * @param finaicialPercent the value for data_user.finaicial_percent, 财富值：用户的投资总金额和500万相比
     */
    public void setFinaicialPercent(BigDecimal finaicialPercent) {
        this.finaicialPercent = finaicialPercent;
    }

    /**
     * 获取 活力值：购买活动产品的次数比 字段:data_user.activity_percent
     *
     * @return data_user.activity_percent, 活力值：购买活动产品的次数比
     */
    public BigDecimal getActivityPercent() {
        return activityPercent;
    }

    /**
     * 设置 活力值：购买活动产品的次数比 字段:data_user.activity_percent
     *
     * @param activityPercent the value for data_user.activity_percent, 活力值：购买活动产品的次数比
     */
    public void setActivityPercent(BigDecimal activityPercent) {
        this.activityPercent = activityPercent;
    }

    /**
     * 获取 吸金力：总收益的百分比 字段:data_user.income_percent
     *
     * @return data_user.income_percent, 吸金力：总收益的百分比
     */
    public BigDecimal getIncomePercent() {
        return incomePercent;
    }

    /**
     * 设置 吸金力：总收益的百分比 字段:data_user.income_percent
     *
     * @param incomePercent the value for data_user.income_percent, 吸金力：总收益的百分比
     */
    public void setIncomePercent(BigDecimal incomePercent) {
        this.incomePercent = incomePercent;
    }

    /**
     * 获取 领袖力：以用户购买长期理财产品的数量来做百分比 （4个月（含）以上产品） 字段:data_user.long_term_percent
     *
     * @return data_user.long_term_percent, 领袖力：以用户购买长期理财产品的数量来做百分比 （4个月（含）以上产品）
     */
    public BigDecimal getLongTermPercent() {
        return longTermPercent;
    }

    /**
     * 设置 领袖力：以用户购买长期理财产品的数量来做百分比 （4个月（含）以上产品） 字段:data_user.long_term_percent
     *
     * @param longTermPercent the value for data_user.long_term_percent, 领袖力：以用户购买长期理财产品的数量来做百分比 （4个月（含）以上产品）
     */
    public void setLongTermPercent(BigDecimal longTermPercent) {
        this.longTermPercent = longTermPercent;
    }

    /**
     * 获取 决断力：以用户购买短期理财产品的数量来做百分比 （4个月以下产品） 字段:data_user.short_term_percent
     *
     * @return data_user.short_term_percent, 决断力：以用户购买短期理财产品的数量来做百分比 （4个月以下产品）
     */
    public BigDecimal getShortTermPercent() {
        return shortTermPercent;
    }

    /**
     * 设置 决断力：以用户购买短期理财产品的数量来做百分比 （4个月以下产品） 字段:data_user.short_term_percent
     *
     * @param shortTermPercent the value for data_user.short_term_percent, 决断力：以用户购买短期理财产品的数量来做百分比 （4个月以下产品）
     */
    public void setShortTermPercent(BigDecimal shortTermPercent) {
        this.shortTermPercent = shortTermPercent;
    }

    /**
     * 获取 0-2点交易次数 字段:data_user.trading_point_three
     *
     * @return data_user.trading_point_three, 0-2点交易次数
     */
    public Integer getTradingPointThree() {
        return tradingPointThree;
    }

    /**
     * 设置 0-2点交易次数 字段:data_user.trading_point_three
     *
     * @param tradingPointThree the value for data_user.trading_point_three, 0-2点交易次数
     */
    public void setTradingPointThree(Integer tradingPointThree) {
        this.tradingPointThree = tradingPointThree;
    }

    /**
     * 获取 3-5点交易次数 字段:data_user.trading_point_six
     *
     * @return data_user.trading_point_six, 3-5点交易次数
     */
    public Integer getTradingPointSix() {
        return tradingPointSix;
    }

    /**
     * 设置 3-5点交易次数 字段:data_user.trading_point_six
     *
     * @param tradingPointSix the value for data_user.trading_point_six, 3-5点交易次数
     */
    public void setTradingPointSix(Integer tradingPointSix) {
        this.tradingPointSix = tradingPointSix;
    }

    /**
     * 获取 6-8点交易次数 字段:data_user.trading_point_nine
     *
     * @return data_user.trading_point_nine, 6-8点交易次数
     */
    public Integer getTradingPointNine() {
        return tradingPointNine;
    }

    /**
     * 设置 6-8点交易次数 字段:data_user.trading_point_nine
     *
     * @param tradingPointNine the value for data_user.trading_point_nine, 6-8点交易次数
     */
    public void setTradingPointNine(Integer tradingPointNine) {
        this.tradingPointNine = tradingPointNine;
    }

    /**
     * 获取 9-11点交易次数 字段:data_user.trading_point_twelve
     *
     * @return data_user.trading_point_twelve, 9-11点交易次数
     */
    public Integer getTradingPointTwelve() {
        return tradingPointTwelve;
    }

    /**
     * 设置 9-11点交易次数 字段:data_user.trading_point_twelve
     *
     * @param tradingPointTwelve the value for data_user.trading_point_twelve, 9-11点交易次数
     */
    public void setTradingPointTwelve(Integer tradingPointTwelve) {
        this.tradingPointTwelve = tradingPointTwelve;
    }

    /**
     * 获取 12-14点交易次数 字段:data_user.trading_point_fifteen
     *
     * @return data_user.trading_point_fifteen, 12-14点交易次数
     */
    public Integer getTradingPointFifteen() {
        return tradingPointFifteen;
    }

    /**
     * 设置 12-14点交易次数 字段:data_user.trading_point_fifteen
     *
     * @param tradingPointFifteen the value for data_user.trading_point_fifteen, 12-14点交易次数
     */
    public void setTradingPointFifteen(Integer tradingPointFifteen) {
        this.tradingPointFifteen = tradingPointFifteen;
    }

    /**
     * 获取 15-17点交易次数 字段:data_user.trading_point_eighteen
     *
     * @return data_user.trading_point_eighteen, 15-17点交易次数
     */
    public Integer getTradingPointEighteen() {
        return tradingPointEighteen;
    }

    /**
     * 设置 15-17点交易次数 字段:data_user.trading_point_eighteen
     *
     * @param tradingPointEighteen the value for data_user.trading_point_eighteen, 15-17点交易次数
     */
    public void setTradingPointEighteen(Integer tradingPointEighteen) {
        this.tradingPointEighteen = tradingPointEighteen;
    }

    /**
     * 获取 18-20点交易次数 字段:data_user.trading_point_twentyone
     *
     * @return data_user.trading_point_twentyone, 18-20点交易次数
     */
    public Integer getTradingPointTwentyone() {
        return tradingPointTwentyone;
    }

    /**
     * 设置 18-20点交易次数 字段:data_user.trading_point_twentyone
     *
     * @param tradingPointTwentyone the value for data_user.trading_point_twentyone, 18-20点交易次数
     */
    public void setTradingPointTwentyone(Integer tradingPointTwentyone) {
        this.tradingPointTwentyone = tradingPointTwentyone;
    }

    /**
     * 获取 21-23点交易次数 字段:data_user.trading_point_twentyfour
     *
     * @return data_user.trading_point_twentyfour, 21-23点交易次数
     */
    public Integer getTradingPointTwentyfour() {
        return tradingPointTwentyfour;
    }

    /**
     * 设置 21-23点交易次数 字段:data_user.trading_point_twentyfour
     *
     * @param tradingPointTwentyfour the value for data_user.trading_point_twentyfour, 21-23点交易次数
     */
    public void setTradingPointTwentyfour(Integer tradingPointTwentyfour) {
        this.tradingPointTwentyfour = tradingPointTwentyfour;
    }

    /**
     * 获取 最活跃的时段（上午、下午、晚上、夜里） 字段:data_user.trading_active
     *
     * @return data_user.trading_active, 最活跃的时段（上午、下午、晚上、夜里）
     */
    public String getTradingActive() {
        return tradingActive;
    }

    /**
     * 设置 最活跃的时段（上午、下午、晚上、夜里） 字段:data_user.trading_active
     *
     * @param tradingActive the value for data_user.trading_active, 最活跃的时段（上午、下午、晚上、夜里）
     */
    public void setTradingActive(String tradingActive) {
        this.tradingActive = tradingActive == null ? null : tradingActive.trim();
    }

    /**
     * ,data_user
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash = ").append(hashCode());
        sb.append(", uId=").append(uId);
        sb.append(", constellation=").append(constellation);
        sb.append(", constellationNum=").append(constellationNum);
        sb.append(", regDate=").append(regDate);
        sb.append(", regDiffday=").append(regDiffday);
        sb.append(", regLevel=").append(regLevel);
        sb.append(", productName=").append(productName);
        sb.append(", financialMoney=").append(financialMoney);
        sb.append(", income=").append(income);
        sb.append(", buyDate=").append(buyDate);
        sb.append(", num=").append(num);
        sb.append(", totalFinance=").append(totalFinance);
        sb.append(", totalIncome=").append(totalIncome);
        sb.append(", beatPercent=").append(beatPercent);
        sb.append(", mostBuyMonth=").append(mostBuyMonth);
        sb.append(", mostBuyMonthMoney=").append(mostBuyMonthMoney);
        sb.append(", finaicialPercent=").append(finaicialPercent);
        sb.append(", activityPercent=").append(activityPercent);
        sb.append(", incomePercent=").append(incomePercent);
        sb.append(", longTermPercent=").append(longTermPercent);
        sb.append(", shortTermPercent=").append(shortTermPercent);
        sb.append(", tradingPointThree=").append(tradingPointThree);
        sb.append(", tradingPointSix=").append(tradingPointSix);
        sb.append(", tradingPointNine=").append(tradingPointNine);
        sb.append(", tradingPointTwelve=").append(tradingPointTwelve);
        sb.append(", tradingPointFifteen=").append(tradingPointFifteen);
        sb.append(", tradingPointEighteen=").append(tradingPointEighteen);
        sb.append(", tradingPointTwentyone=").append(tradingPointTwentyone);
        sb.append(", tradingPointTwentyfour=").append(tradingPointTwentyfour);
        sb.append(", tradingActive=").append(tradingActive);
        sb.append("]");
        return sb.toString();
    }
}