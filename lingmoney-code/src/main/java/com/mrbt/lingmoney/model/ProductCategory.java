package com.mrbt.lingmoney.model;

import java.io.Serializable;

public class ProductCategory implements Serializable {
    /**
     * 主键
     * 表字段 : product_category.id
     */
    private Integer id;

    /**
     * 根据code码配置web项目中的处理类
            生成规则：随机2位数字+（id前补0）4位id+2位g_id（前补0）+type
     * 表字段 : product_category.code
     */
    private String code;

    /**
     * 分类名称
     * 表字段 : product_category.name
     */
    private String name;

    /**
     * 分类的组id，关联product_param中name=product_group的子项
     * 表字段 : product_category.g_id
     */
    private Integer gId;

    /**
     * 分类组的名称
     * 表字段 : product_category.g_name
     */
    private String gName;

    /**
     * 类型，0:固定收益类，1:浮动类
     * 表字段 : product_category.type
     */
    private Integer type;

    /**
     * 只有固定类有，0:无,1:固定不变，2:区间
     * 表字段 : product_category.fix_type
     */
    private Integer fixType;

    /**
     * 状态，0:未生效，1生效
     * 表字段 : product_category.status
     */
    private Integer status;

    /**
     * 描述信息
     * 表字段 : product_category.description
     */
    private String description;
    
    /**
     * 描述信息
     * 表字段 : product_category.image_url
     */
    private String imageUrl;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table product_category
     *
     * @mbg.generated
     */
    private static final long serialVersionUID = 1L;

    /**
     * 获取 主键 字段:product_category.id
     *
     * @return product_category.id, 主键
     */
    public Integer getId() {
        return id;
    }

    /**
     * 设置 主键 字段:product_category.id
     *
     * @param id the value for product_category.id, 主键
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * 获取 根据code码配置web项目中的处理类
            生成规则：随机2位数字+（id前补0）4位id+2位g_id（前补0）+type 字段:product_category.code
     *
     * @return product_category.code, 根据code码配置web项目中的处理类
            生成规则：随机2位数字+（id前补0）4位id+2位g_id（前补0）+type
     */
    public String getCode() {
        return code;
    }

    /**
     * 设置 根据code码配置web项目中的处理类
            生成规则：随机2位数字+（id前补0）4位id+2位g_id（前补0）+type 字段:product_category.code
     *
     * @param code the value for product_category.code, 根据code码配置web项目中的处理类
            生成规则：随机2位数字+（id前补0）4位id+2位g_id（前补0）+type
     */
    public void setCode(String code) {
        this.code = code == null ? null : code.trim();
    }

    /**
     * 获取 分类名称 字段:product_category.name
     *
     * @return product_category.name, 分类名称
     */
    public String getName() {
        return name;
    }

    /**
     * 设置 分类名称 字段:product_category.name
     *
     * @param name the value for product_category.name, 分类名称
     */
    public void setName(String name) {
        this.name = name == null ? null : name.trim();
    }

    /**
     * 获取 分类的组id，关联product_param中name=product_group的子项 字段:product_category.g_id
     *
     * @return product_category.g_id, 分类的组id，关联product_param中name=product_group的子项
     */
    public Integer getgId() {
        return gId;
    }

    /**
     * 设置 分类的组id，关联product_param中name=product_group的子项 字段:product_category.g_id
     *
     * @param gId the value for product_category.g_id, 分类的组id，关联product_param中name=product_group的子项
     */
    public void setgId(Integer gId) {
        this.gId = gId;
    }

    /**
     * 获取 分类组的名称 字段:product_category.g_name
     *
     * @return product_category.g_name, 分类组的名称
     */
    public String getgName() {
        return gName;
    }

    /**
     * 设置 分类组的名称 字段:product_category.g_name
     *
     * @param gName the value for product_category.g_name, 分类组的名称
     */
    public void setgName(String gName) {
        this.gName = gName == null ? null : gName.trim();
    }

    /**
     * 获取 类型，0:固定收益类，1:浮动类 字段:product_category.type
     *
     * @return product_category.type, 类型，0:固定收益类，1:浮动类
     */
    public Integer getType() {
        return type;
    }

    /**
     * 设置 类型，0:固定收益类，1:浮动类 字段:product_category.type
     *
     * @param type the value for product_category.type, 类型，0:固定收益类，1:浮动类
     */
    public void setType(Integer type) {
        this.type = type;
    }

    /**
     * 获取 只有固定类有，0:无,1:固定不变，2:区间 字段:product_category.fix_type
     *
     * @return product_category.fix_type, 只有固定类有，0:无,1:固定不变，2:区间
     */
    public Integer getFixType() {
        return fixType;
    }

    /**
     * 设置 只有固定类有，0:无,1:固定不变，2:区间 字段:product_category.fix_type
     *
     * @param fixType the value for product_category.fix_type, 只有固定类有，0:无,1:固定不变，2:区间
     */
    public void setFixType(Integer fixType) {
        this.fixType = fixType;
    }

    /**
     * 获取 状态，0:未生效，1生效 字段:product_category.status
     *
     * @return product_category.status, 状态，0:未生效，1生效
     */
    public Integer getStatus() {
        return status;
    }

    /**
     * 设置 状态，0:未生效，1生效 字段:product_category.status
     *
     * @param status the value for product_category.status, 状态，0:未生效，1生效
     */
    public void setStatus(Integer status) {
        this.status = status;
    }

    /**
     * 获取 描述信息 字段:product_category.description
     *
     * @return product_category.description, 描述信息
     */
    public String getDescription() {
        return description;
    }

    /**
     * 设置 描述信息 字段:product_category.description
     *
     * @param description the value for product_category.description, 描述信息
     */
    public void setDescription(String description) {
        this.description = description == null ? null : description.trim();
    }

    public String getImageUrl() {
		return imageUrl;
	}

	public void setImageUrl(String imageUrl) {
		this.imageUrl = imageUrl==null ? null : imageUrl.trim();
	}

	/**
     * ,product_category
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash = ").append(hashCode());
        sb.append(", id=").append(id);
        sb.append(", code=").append(code);
        sb.append(", name=").append(name);
        sb.append(", gId=").append(gId);
        sb.append(", gName=").append(gName);
        sb.append(", type=").append(type);
        sb.append(", fixType=").append(fixType);
        sb.append(", status=").append(status);
        sb.append(", description=").append(description);
        sb.append(", imageUrl=").append(imageUrl);
        sb.append("]");
        return sb.toString();
    }
}