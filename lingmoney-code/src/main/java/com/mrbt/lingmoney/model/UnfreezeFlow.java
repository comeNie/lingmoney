package com.mrbt.lingmoney.model;

import java.io.Serializable;
import java.util.Date;

public class UnfreezeFlow implements Serializable {
    /**
     * 
     * 表字段 : unfreeze_flow.id
     */
    private Integer id;

    /**
     * 流水号
     * 表字段 : unfreeze_flow.request_no
     */
    private String requestNo;

    /**
     * 解冻时间
     * 表字段 : unfreeze_flow.shaw_date
     */
    private Date shawDate;

    /**
     * 状态，0：处理中，1成功，2失败
     * 表字段 : unfreeze_flow.status
     */
    private Integer status;

    /**
     * 
     * 表字段 : unfreeze_flow.u_id
     */
    private String uId;

    /**
     * 失败原因
     * 表字段 : unfreeze_flow.fail_reason
     */
    private String failReason;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table unfreeze_flow
     *
     * @mbg.generated
     */
    private static final long serialVersionUID = 1L;

    /**
     * 获取  字段:unfreeze_flow.id
     *
     * @return unfreeze_flow.id, 
     */
    public Integer getId() {
        return id;
    }

    /**
     * 设置  字段:unfreeze_flow.id
     *
     * @param id the value for unfreeze_flow.id, 
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * 获取 流水号 字段:unfreeze_flow.request_no
     *
     * @return unfreeze_flow.request_no, 流水号
     */
    public String getRequestNo() {
        return requestNo;
    }

    /**
     * 设置 流水号 字段:unfreeze_flow.request_no
     *
     * @param requestNo the value for unfreeze_flow.request_no, 流水号
     */
    public void setRequestNo(String requestNo) {
        this.requestNo = requestNo == null ? null : requestNo.trim();
    }

    /**
     * 获取 解冻时间 字段:unfreeze_flow.shaw_date
     *
     * @return unfreeze_flow.shaw_date, 解冻时间
     */
    public Date getShawDate() {
        return shawDate;
    }

    /**
     * 设置 解冻时间 字段:unfreeze_flow.shaw_date
     *
     * @param shawDate the value for unfreeze_flow.shaw_date, 解冻时间
     */
    public void setShawDate(Date shawDate) {
        this.shawDate = shawDate;
    }

    /**
     * 获取 状态，0：处理中，1成功，2失败 字段:unfreeze_flow.status
     *
     * @return unfreeze_flow.status, 状态，0：处理中，1成功，2失败
     */
    public Integer getStatus() {
        return status;
    }

    /**
     * 设置 状态，0：处理中，1成功，2失败 字段:unfreeze_flow.status
     *
     * @param status the value for unfreeze_flow.status, 状态，0：处理中，1成功，2失败
     */
    public void setStatus(Integer status) {
        this.status = status;
    }

    /**
     * 获取  字段:unfreeze_flow.u_id
     *
     * @return unfreeze_flow.u_id, 
     */
    public String getuId() {
        return uId;
    }

    /**
     * 设置  字段:unfreeze_flow.u_id
     *
     * @param uId the value for unfreeze_flow.u_id, 
     */
    public void setuId(String uId) {
        this.uId = uId == null ? null : uId.trim();
    }

    /**
     * 获取 失败原因 字段:unfreeze_flow.fail_reason
     *
     * @return unfreeze_flow.fail_reason, 失败原因
     */
    public String getFailReason() {
        return failReason;
    }

    /**
     * 设置 失败原因 字段:unfreeze_flow.fail_reason
     *
     * @param failReason the value for unfreeze_flow.fail_reason, 失败原因
     */
    public void setFailReason(String failReason) {
        this.failReason = failReason == null ? null : failReason.trim();
    }

    /**
     * ,unfreeze_flow
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash = ").append(hashCode());
        sb.append(", id=").append(id);
        sb.append(", requestNo=").append(requestNo);
        sb.append(", shawDate=").append(shawDate);
        sb.append(", status=").append(status);
        sb.append(", uId=").append(uId);
        sb.append(", failReason=").append(failReason);
        sb.append("]");
        return sb.toString();
    }
}