package com.mrbt.lingmoney.model;

import java.io.Serializable;
import java.util.Date;

public class Templet implements Serializable {
    /**
     * 自增主键
     * 表字段 : templet.id
     */
    private Integer id;

    /**
     * 模板名称
     * 表字段 : templet.temp_name
     */
    private String tempName;

    /**
     * 1-word 2-pdf 3-xml 4-excel 5-html 6-json
     * 表字段 : templet.file_type
     */
    private String fileType;

    /**
     * 修改时间
     * 表字段 : templet.modi_date
     */
    private Date modiDate;

    /**
     * 0-不可用 1-可用
     * 表字段 : templet.status
     */
    private Integer status;

    /**
     * 模板样例图片
     * 表字段 : templet.temp_sample
     */
    private String tempSample;

    /**
     * 文件流，应用的时候读取出字符串
     * 表字段 : templet.file
     */
    private byte[] file;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table templet
     *
     * @mbggenerated
     */
    private static final long serialVersionUID = 1L;

    /**
     * 获取 自增主键 字段:templet.id
     *
     * @return templet.id, 自增主键
     */
    public Integer getId() {
        return id;
    }

    /**
     * 设置 自增主键 字段:templet.id
     *
     * @param id the value for templet.id, 自增主键
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * 获取 模板名称 字段:templet.temp_name
     *
     * @return templet.temp_name, 模板名称
     */
    public String getTempName() {
        return tempName;
    }

    /**
     * 设置 模板名称 字段:templet.temp_name
     *
     * @param tempName the value for templet.temp_name, 模板名称
     */
    public void setTempName(String tempName) {
        this.tempName = tempName == null ? null : tempName.trim();
    }

    /**
     * 获取 1-word 2-pdf 3-xml 4-excel 5-html 6-json 字段:templet.file_type
     *
     * @return templet.file_type, 1-word 2-pdf 3-xml 4-excel 5-html 6-json
     */
    public String getFileType() {
        return fileType;
    }

    /**
     * 设置 1-word 2-pdf 3-xml 4-excel 5-html 6-json 字段:templet.file_type
     *
     * @param fileType the value for templet.file_type, 1-word 2-pdf 3-xml 4-excel 5-html 6-json
     */
    public void setFileType(String fileType) {
        this.fileType = fileType == null ? null : fileType.trim();
    }

    /**
     * 获取 修改时间 字段:templet.modi_date
     *
     * @return templet.modi_date, 修改时间
     */
    public Date getModiDate() {
        return modiDate;
    }

    /**
     * 设置 修改时间 字段:templet.modi_date
     *
     * @param modiDate the value for templet.modi_date, 修改时间
     */
    public void setModiDate(Date modiDate) {
        this.modiDate = modiDate;
    }

    /**
     * 获取 0-不可用 1-可用 字段:templet.status
     *
     * @return templet.status, 0-不可用 1-可用
     */
    public Integer getStatus() {
        return status;
    }

    /**
     * 设置 0-不可用 1-可用 字段:templet.status
     *
     * @param status the value for templet.status, 0-不可用 1-可用
     */
    public void setStatus(Integer status) {
        this.status = status;
    }

    /**
     * 获取 模板样例图片 字段:templet.temp_sample
     *
     * @return templet.temp_sample, 模板样例图片
     */
    public String getTempSample() {
        return tempSample;
    }

    /**
     * 设置 模板样例图片 字段:templet.temp_sample
     *
     * @param tempSample the value for templet.temp_sample, 模板样例图片
     */
    public void setTempSample(String tempSample) {
        this.tempSample = tempSample == null ? null : tempSample.trim();
    }

    /**
     * 获取 文件流，应用的时候读取出字符串 字段:templet.file
     *
     * @return templet.file, 文件流，应用的时候读取出字符串
     */
    public byte[] getFile() {
        return file;
    }

    /**
     * 设置 文件流，应用的时候读取出字符串 字段:templet.file
     *
     * @param file the value for templet.file, 文件流，应用的时候读取出字符串
     */
    public void setFile(byte[] file) {
        this.file = file;
    }

    /**
     * ,templet
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash = ").append(hashCode());
        sb.append(", id=").append(id);
        sb.append(", tempName=").append(tempName);
        sb.append(", fileType=").append(fileType);
        sb.append(", modiDate=").append(modiDate);
        sb.append(", status=").append(status);
        sb.append(", tempSample=").append(tempSample);
        sb.append(", file=").append(file);
        sb.append("]");
        return sb.toString();
    }
}